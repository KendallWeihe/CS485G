Script started on Fri 26 Aug 2016 01:04:11 PM EDT
]0;kmwe236@kmwe236: ~/CS485/lab1kmwe236@kmwe236:~/CS485/lab1$ wget http://www.cs.uky.edu/~raphael/courses/CS485/lab1/test .c
--2016-08-26 13:04:14--  http://www.cs.uky.edu/~raphael/courses/CS485/lab1/test.c
Resolving www.cs.uky.edu (www.cs.uky.edu)... 128.163.146.21
Connecting to www.cs.uky.edu (www.cs.uky.edu)|128.163.146.21|:80... connected.
HTTP request sent, awaiting response... 200 OK
Length: 3529 (3.4K) [text/x-csrc]
Saving to: â€˜test.câ€™

 0% [                                                ] 0           --.-K/s              100%[===============================================>] 3,529       --.-K/s   in 0s      

2016-08-26 13:04:14 (287 MB/s) - â€˜test.câ€™ saved [3529/3529]

]0;kmwe236@kmwe236: ~/CS485/lab1kmwe236@kmwe236:~/CS485/lab1$ ls
session_lab1.txt  test.c
]0;kmwe236@kmwe236: ~/CS485/lab1kmwe236@kmwe236:~/CS485/lab1$ vi test.c 
[?1049h[?1h=[2;1Hâ–½[6n[1;1H  [1;1H[1;51r[?12;25h[?12l[?25h[27m[m[H[2J[?25l[51;1H"test.c" 104L, 3529C[>c[1;1H[34m/* The web site http://www.ibm.com/developerworks/library/l-gnuprof.html has
 * a nice description of how to use the gprof utility.  Please consult
 * that site for additional information.  The following code is derived
 * from code on that page, but shows an addition level of procedure calls.
 *
 * A nice overview of the features and command line options available in
 * gprof can be found here http://www.cs.utah.edu/dept/old/texinfo/as/gprof.html
 *
 * Your goal in this exercise is to use the gcc, gprof, and valgrind programs
 * to analyze the performance of the program below.   You should follow
 * the steps below and should save your session in a file called mysession.txt.
 * You should then upload your "mysession.txt" file to the
 * CS Portal: https://www.cs.uky.edu/csportal.
 *
 * YOU MUST PERFORM THIS EXERCISE ON YOUR VM.
 *
 * A. Record your session:
 *   1. Use the "script" command (script mysession.txt)
 *
 * B. Read through the test program to see what it is doing
 *   1. Use one of less, vim, emacs, gedit, or some other program
 *      to display the program.
 *  
 * C. Compile with varying levels of optimizations and time the runtime
 *   1. Compile with no optimizations using the -O0 option (gcc -Wall -O0 -o test test.c)[26;1H *   2. Run and time the program (time ./test 1000)
 *   3. Compile with max optimizations using the -O3 option (gcc -Wall -O3 -o test test.cc[28;1H)
 *   4. Run and time the program (time ./test 1000)
 *   5. Say which is faster (echo "The FILL_IN_THE_BLANK was faster.  It took FILL_IN_THEE[31;1H_BLANK time.")
 *
 * D. Profile both versions of the program using "gprof"
 *    (Do the following steps twice: first with a test program
 *     with no optimizations (-O0), and then with a test program
 *     with max optimizations (-O3).
 *   Steps to use gprof:
 *   1. compile with profiling and debugging options (-p and -g)
 *       and with the appropriate optimization.  For
 *       example, with no optimization it would be "gcc -Wall -p -g -O0 -o test test.c"
 *   2. run the program (./test 1000)
 *   3. print a "flat profile" (gprof -p ./test)
 *   4. print a "call stack profile" (gprof -q ./test)
 *
 * (Remember to repeat the above steps using max optimizations)
 *
 * E. Now profile both versions of the program using "valgrind"
 *    (Do the following steps twice: first with a test program
 *     with no optimizations (-O0), and then with a test program
 *     with max optimizations (-O3).[m[51;72H1,1[11CTop[1;1H[?12l[?25h[?25l[1;50r[1;1H[25M[1;51r[26;1H[34m *   Steps to use valgrind/kcachegrind:
 *   1. run valgrind to create a callgrind profile file
 *      (valgrind --tool=callgrind ./test 1000)
 *   2. run kcachegrind to view the profile (kcachegrind)
 *      Note this will not produce output in your mysession.txt file
 * 
 * F. Stop recording your session:
 *   1. type "exit"
 *
 * G. Now open a web browser on your VM and upload mysession.txt to https://www.cs.uky.edd[36;1Hu/csportal
 */[m
[35m#include [m[31m<stdio.h>[m
[35m#include [m[31m<stdlib.h>[m

[32mint[m a([32mvoid[m) {
  [32mint[m i = [31m0[m, g = [31m0[m;
  [38;5;130mwhile[m(i++ < [31m100000[m) {[44;11Hg += i;
  }
  [38;5;130mreturn[m g;
} [34m// a()[m

[32mint[m c([32mvoid[m) {
  [32mint[m i = [31m0[m, g = [31m0[m;[51;1H[K[51;72H26,2[10C43%[1;2H[?12l[?25h[?25l[1;50r[1;1H[25M[1;51r[26;3H[38;5;130mwhile[m(i++ < [31m400000[m) {[27;10Hg += i;
  }
  [38;5;130mreturn[m g;
} [34m// c()[m

[32mint[m b([32mvoid[m) {
  [32mint[m i = [31m0[m, g = [31m0[m;
  [38;5;130mwhile[m(i++ < [31m400000[m) {[35;10Hg += i;
  }
  c();
  [38;5;130mreturn[m g;
} [34m// b()

/* ---- main() ---- */[m
[32mint[m main([32mint[m argc, [32mchar[m** argv)
{[44;9H[32mint[m iterations;[45;9H[38;5;130mif[m(argc != [31m2[m) {[46;17Hprintf([31m"Usage [m[35m%s[m[31m <Number of Iterations>[m[35m\n[m[31m"[m, argv[[31m0[m]);[47;17Hexit(-[31m1[m);[48;9H} [38;5;130melse[m {[49;17Hiterations = atoi(argv[[31m1[m]);[50;9H}[51;72H[K[51;72H49,2[10C87%[1;2H[?12l[?25h[?25l[1;50r[1;1H[7M[1;51r[44;9Hprintf([31m"No of iterations = [m[35m%d\n[m[31m"[m, iterations);[45;9H[38;5;130mwhile[m(iterations--) {[46;17Ha();[47;17Hb();[48;9H}[49;9H[38;5;130mreturn[m([31m0[m);
} [34m// main[m[51;72H[K[51;72H74,3-10[7CBot[20;10H[?12l[?25h[?25l[51;72H[K[51;1H:[?12l[?25hw[?25l[?12l[?25hq[?25l[?12l[?25h[?25l"test.c" 104L, 3529C written
[?1l>[?12l[?25h[?1049l]0;kmwe236@kmwe236: ~/CS485/lab1kmwe236@kmwe236:~/CS485/lab1$ gcc -Wall -O0 -o test test.c
]0;kmwe236@kmwe236: ~/CS485/lab1kmwe236@kmwe236:~/CS485/lab1$ time ./test 1000
No of iterations = 1000

real	0m2.832s
user	0m2.824s
sys	0m0.004s
]0;kmwe236@kmwe236: ~/CS485/lab1kmwe236@kmwe236:~/CS485/lab1$ ls
session_lab1.txt  [0m[01;32mtest[0m  test.c
]0;kmwe236@kmwe236: ~/CS485/lab1kmwe236@kmwe236:~/CS485/lab1$ rm test
]0;kmwe236@kmwe236: ~/CS485/lab1kmwe236@kmwe236:~/CS485/lab1$ gcc -Wall -O3 -o test test.c
]0;kmwe236@kmwe236: ~/CS485/lab1kmwe236@kmwe236:~/CS485/lab1$ gcc -Wall -O3 -o test test.crm test[Kls[Ktime ./test 1000
No of iterations = 1000

real	0m0.002s
user	0m0.000s
sys	0m0.002s
]0;kmwe236@kmwe236: ~/CS485/lab1kmwe236@kmwe236:~/CS485/lab1$ echo "The FILL_IN_THE_BLANK was faster. It took FILL_IN_THE _BLANK time."[A[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C was faster. It took FILL_IN_THE_B[1P[A]0;kmwe236@kmwe236: ~/CS485/lab1kmwe236@kmwe236:~/CS485/lab1$ [C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C was faster. It took FILL_IN_THE_BL[1P[A]0;kmwe236@kmwe236: ~/CS485/lab1kmwe236@kmwe236:~/CS485/lab1$ [C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C was faster. It took FILL_IN_THE_BLA[1P[A]0;kmwe236@kmwe236: ~/CS485/lab1kmwe236@kmwe236:~/CS485/lab1$ [C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C was faster. It took FILL_IN_THE_BLAN[1P[A]0;kmwe236@kmwe236: ~/CS485/lab1kmwe236@kmwe236:~/CS485/lab1$ [C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C was faster. It took FILL_IN_THE_BLANK[1P time."[A]0;kmwe236@kmwe236: ~/CS485/lab1kmwe236@kmwe236:~/CS485/lab1$ [C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C was faster. It took FILL_IN_THE_BLANK [1Ptime."[A]0;kmwe236@kmwe236: ~/CS485/lab1kmwe236@kmwe236:~/CS485/lab1$ [C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C was faster. It took FILL_IN_THE_BLANK t[1Pime."[A]0;kmwe236@kmwe236: ~/CS485/lab1kmwe236@kmwe236:~/CS485/lab1$ [C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C was faster. It took FILL_IN_THE_BLANK ti[1Pme."[A]0;kmwe236@kmwe236: ~/CS485/lab1kmwe236@kmwe236:~/CS485/lab1$ [C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C was faster. It took FILL_IN_THE_BLANK tim[1Pe."[A]0;kmwe236@kmwe236: ~/CS485/lab1kmwe236@kmwe236:~/CS485/lab1$ [C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C was faster. It took FILL_IN_THE_BLANK time[1P."[A]0;kmwe236@kmwe236: ~/CS485/lab1kmwe236@kmwe236:~/CS485/lab1$ [C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C was faster. It took FILL_IN_THE_BLANK time.[1P"[A]0;kmwe236@kmwe236: ~/CS485/lab1kmwe236@kmwe236:~/CS485/lab1$ [C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C was faster. It took FILL_IN_THE_BLANK time."[K[A]0;kmwe236@kmwe236: ~/CS485/lab1kmwe236@kmwe236:~/CS485/lab1$ [C[C[C[C[C[C[C[C[C[C[C[C[C[C[C was faster. It took FILL_IN_THE_BLANK time." [K[A[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[1P
[K[A[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[1P[1P[1P[1@o[1@p[1@ti was faster. It took FILL_IN_THE_BLANK time." [A]0;kmwe236@kmwe236: ~/CS485/lab1kmwe236@kmwe236:~/CS485/lab1$ [C[C[C[C[C[C[C[C[C[C[C[C[C[Cm was faster. It took FILL_IN_THE_BLANK time.""[A]0;kmwe236@kmwe236: ~/CS485/lab1kmwe236@kmwe236:~/CS485/lab1$ [C[C[C[C[C[C[C[C[C[C[C[C[C[C[Ci was faster. It took FILL_IN_THE_BLANK time."[A]0;kmwe236@kmwe236: ~/CS485/lab1kmwe236@kmwe236:~/CS485/lab1$ [C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[Ca was faster. It took FILL_IN_THE_BLANK time."[A]0;kmwe236@kmwe236: ~/CS485/lab1kmwe236@kmwe236:~/CS485/lab1$ [C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C was faster. It took FILL_IN_THE_BLANK time.[1P"[A]0;kmwe236@kmwe236: ~/CS485/lab1kmwe236@kmwe236:~/CS485/lab1$ [C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[Cz was faster. It took FILL_IN_THE_BLANK time."[A]0;kmwe236@kmwe236: ~/CS485/lab1kmwe236@kmwe236:~/CS485/lab1$ [C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[Ca was faster. It took FILL_IN_THE_BLANK time."[A]0;kmwe236@kmwe236: ~/CS485/lab1kmwe236@kmwe236:~/CS485/lab1$ [C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[Ct was faster. It took FILL_IN_THE_BLANK time."[A]0;kmwe236@kmwe236: ~/CS485/lab1kmwe236@kmwe236:~/CS485/lab1$ [C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[Ci was faster. It took FILL_IN_THE_BLANK time."[A]0;kmwe236@kmwe236: ~/CS485/lab1kmwe236@kmwe236:~/CS485/lab1$ [C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[Co was faster. It took FILL_IN_THE_BLANK time."[A]0;kmwe236@kmwe236: ~/CS485/lab1kmwe236@kmwe236:~/CS485/lab1$ [C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[Cn was faster. It took FILL_IN_THE_BLANK time."[A]0;kmwe236@kmwe236: ~/CS485/lab1kmwe236@kmwe236:~/CS485/lab1$ [C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C was faster. It took FILL_IN_THE_BLANK time."[A]0;kmwe236@kmwe236: ~/CS485/lab1kmwe236@kmwe236:~/CS485/lab1$ [C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[Cl was faster. It took FILL_IN_THE_BLA[1@N[A]0;kmwe236@kmwe236: ~/CS485/lab1kmwe236@kmwe236:~/CS485/lab1$ [C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[Ce was faster. It took FILL_IN_THE_BL[1@A[A]0;kmwe236@kmwe236: ~/CS485/lab1kmwe236@kmwe236:~/CS485/lab1$ [C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[Cv was faster. It took FILL_IN_THE_B[1@L[A]0;kmwe236@kmwe236: ~/CS485/lab1kmwe236@kmwe236:~/CS485/lab1$ [C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[Ce was faster. It took FILL_IN_THE_[1@B[A]0;kmwe236@kmwe236: ~/CS485/lab1kmwe236@kmwe236:~/CS485/lab1$ [C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[Cl was faster. It took FILL_IN_THE[1@_[A]0;kmwe236@kmwe236: ~/CS485/lab1kmwe236@kmwe236:~/CS485/lab1$ [C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C was faster. It took FILL_IN_TH[1@E[A]0;kmwe236@kmwe236: ~/CS485/lab1kmwe236@kmwe236:~/CS485/lab1$ [C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C3 was faster. It took FILL_IN_T[1@H[A]0;kmwe236@kmwe236: ~/CS485/lab1kmwe236@kmwe236:~/CS485/lab1$ [C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C
[C[C[C[C[C[C[C[C[C[1P time."[1P time."[1P time."[1P time."[C[C[C[C[C[1P time."[C[C[C[C[1P time."[C[C[C[1P time."[C[C[1P time."[C[1P time."[A[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C t[1Pime."[A]0;kmwe236@kmwe236: ~/CS485/lab1kmwe236@kmwe236:~/CS485/lab1$ [C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C ti[1Pme."[A]0;kmwe236@kmwe236: ~/CS485/lab1kmwe236@kmwe236:~/CS485/lab1$ [C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C tim[1Pe."[A]0;kmwe236@kmwe236: ~/CS485/lab1kmwe236@kmwe236:~/CS485/lab1$ [C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C time[1P."[A]0;kmwe236@kmwe236: ~/CS485/lab1kmwe236@kmwe236:~/CS485/lab1$ [C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C time.[1P"[A]0;kmwe236@kmwe236: ~/CS485/lab1kmwe236@kmwe236:~/CS485/lab1$ [C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C time."[K[A]0;kmwe236@kmwe236: ~/CS485/lab1kmwe236@kmwe236:~/CS485/lab1$ [C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C time." [K[A[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[1P time."
[K[A[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C0 time." [A]0;kmwe236@kmwe236: ~/CS485/lab1kmwe236@kmwe236:~/CS485/lab1$ [C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C. time.""[A]0;kmwe236@kmwe236: ~/CS485/lab1kmwe236@kmwe236:~/CS485/lab1$ [C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C0 time."[A]0;kmwe236@kmwe236: ~/CS485/lab1kmwe236@kmwe236:~/CS485/lab1$ [C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C0 time."[A]0;kmwe236@kmwe236: ~/CS485/lab1kmwe236@kmwe236:~/CS485/lab1$ [C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C2 time."[A]0;kmwe236@kmwe236: ~/CS485/lab1kmwe236@kmwe236:~/CS485/lab1$ [C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[Cs time."[A]0;kmwe236@kmwe236: ~/CS485/lab1kmwe236@kmwe236:~/CS485/lab1$ [C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C time."[A]0;kmwe236@kmwe236: ~/CS485/lab1kmwe236@kmwe236:~/CS485/lab1$ [C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C| time."[C time."[C2 time."[C[Cm time."[C[C[Cs time."[C[C[C[C[C
The optimization level 3 was faster. It took 0.002s | 2ms time.
]0;kmwe236@kmwe236: ~/CS485/lab1kmwe236@kmwe236:~/CS485/lab1$ ls
session_lab1.txt  [0m[01;32mtest[0m  test.c
]0;kmwe236@kmwe236: ~/CS485/lab1kmwe236@kmwe236:~/CS485/lab1$ cd[K[Krm test
]0;kmwe236@kmwe236: ~/CS485/lab1kmwe236@kmwe236:~/CS485/lab1$ gcc -Wall -p -g -O0 -o test test.c
]0;kmwe236@kmwe236: ~/CS485/lab1kmwe236@kmwe236:~/CS485/lab1$ ./test 1000
No of iterations = 1000
]0;kmwe236@kmwe236: ~/CS485/lab1kmwe236@kmwe236:~/CS485/lab1$ gprof -p ./test
Flat profile:

Each sample counts as 0.01 seconds.
  %   cumulative   self              self     total           
 time   seconds   seconds    calls  ms/call  ms/call  name    
 46.40      1.31     1.31     1000     1.31     1.31  c
 45.69      2.61     1.29     1000     1.29     2.61  b
  8.92      2.86     0.25     1000     0.25     0.25  a

 %         the percentage of the total running time of the
time       program used by this function.

cumulative a running sum of the number of seconds accounted
 seconds   for by this function and those listed above it.

 self      the number of seconds accounted for by this
seconds    function alone.  This is the major sort for this
           listing.

calls      the number of times this function was invoked, if
           this function is profiled, else blank.
 
 self      the average number of milliseconds spent in this
ms/call    function per call, if this function is profiled,
	   else blank.

 total     the average number of milliseconds spent in this
ms/call    function and its descendents per call, if this 
	   function is profiled, else blank.

name       the name of the function.  This is the minor sort
           for this listing. The index shows the location of
	   the function in the gprof listing. If the index is
	   in parenthesis it shows where it would appear in
	   the gprof listing if it were to be printed.

Copyright (C) 2012 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.
]0;kmwe236@kmwe236: ~/CS485/lab1kmwe236@kmwe236:~/CS485/lab1$ [K]0;kmwe236@kmwe236: ~/CS485/lab1kmwe236@kmwe236:~/CS485/lab1$ echo "The optimization level 3 was faster. It took 0.002s | 2ms time ."[K[K[A[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[K
[K[A[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[KI just realized it wasn't 2ms but insta[Kead 0.002 [Kms -- very fast !"[K[K[A[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[K
[K[A[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[Kgprof -q ./test
		     Call graph (explanation follows)


granularity: each sample hit covers 2 byte(s) for 0.35% of 2.86 seconds

index % time    self  children    called     name
                                                 <spontaneous>
[1]    100.0    0.00    2.86                 main [1]
                1.29    1.31    1000/1000        b [2]
                0.25    0.00    1000/1000        a [4]
-----------------------------------------------
                1.29    1.31    1000/1000        main [1]
[2]     91.2    1.29    1.31    1000         b [2]
                1.31    0.00    1000/1000        c [3]
-----------------------------------------------
                1.31    0.00    1000/1000        b [2]
[3]     45.9    1.31    0.00    1000         c [3]
-----------------------------------------------
                0.25    0.00    1000/1000        main [1]
[4]      8.8    0.25    0.00    1000         a [4]
-----------------------------------------------

 This table describes the call tree of the program, and was sorted by
 the total amount of time spent in each function and its children.

 Each entry in this table consists of several lines.  The line with the
 index number at the left hand margin lists the current function.
 The lines above it list the functions that called this function,
 and the lines below it list the functions this one called.
 This line lists:
     index	A unique number given to each element of the table.
		Index numbers are sorted numerically.
		The index number is printed next to every function name so
		it is easier to look up where the function is in the table.

     % time	This is the percentage of the `total' time that was spent
		in this function and its children.  Note that due to
		different viewpoints, functions excluded by options, etc,
		these numbers will NOT add up to 100%.

     self	This is the total amount of time spent in this function.

     children	This is the total amount of time propagated into this
		function by its children.

     called	This is the number of times the function was called.
		If the function called itself recursively, the number
		only includes non-recursive calls, and is followed by
		a `+' and the number of recursive calls.

     name	The name of the current function.  The index number is
		printed after it.  If the function is a member of a
		cycle, the cycle number is printed between the
		function's name and the index number.


 For the function's parents, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the function into this parent.

     children	This is the amount of time that was propagated from
		the function's children into this parent.

     called	This is the number of times this parent called the
		function `/' the total number of times the function
		was called.  Recursive calls to the function are not
		included in the number after the `/'.

     name	This is the name of the parent.  The parent's index
		number is printed after it.  If the parent is a
		member of a cycle, the cycle number is printed between
		the name and the index number.

 If the parents of the function cannot be determined, the word
 `<spontaneous>' is printed in the `name' field, and all the other
 fields are blank.

 For the function's children, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the child into the function.

     children	This is the amount of time that was propagated from the
		child's children to the function.

     called	This is the number of times the function called
		this child `/' the total number of times the child
		was called.  Recursive calls by the child are not
		listed in the number after the `/'.

     name	This is the name of the child.  The child's index
		number is printed after it.  If the child is a
		member of a cycle, the cycle number is printed
		between the name and the index number.

 If there are any cycles (circles) in the call graph, there is an
 entry for the cycle-as-a-whole.  This entry shows who called the
 cycle (as parents) and the members of the cycle (as children.)
 The `+' recursive calls entry shows the number of function calls that
 were internal to the cycle, and the calls entry for each member shows,
 for that member, how many times it was called from other members of
 the cycle.

Copyright (C) 2012 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

Index by function name

   [4] a                       [2] b                       [3] c
]0;kmwe236@kmwe236: ~/CS485/lab1kmwe236@kmwe236:~/CS485/lab1$ [K]0;kmwe236@kmwe236: ~/CS485/lab1kmwe236@kmwe236:~/CS485/lab1$ vi test.c 
[?1049h[?1h=[2;1Hâ–½[6n[1;1H  [1;1H[1;51r[?12;25h[?12l[?25h[27m[m[H[2J[?25l[51;1H"test.c" 104L, 3529C[>c[1;1H[34m/* The web site http://www.ibm.com/developerworks/library/l-gnuprof.html has
 * a nice description of how to use the gprof utility.  Please consult
 * that site for additional information.  The following code is derived
 * from code on that page, but shows an addition level of procedure calls.
 *
 * A nice overview of the features and command line options available in
 * gprof can be found here http://www.cs.utah.edu/dept/old/texinfo/as/gprof.html
 *
 * Your goal in this exercise is to use the gcc, gprof, and valgrind programs
 * to analyze the performance of the program below.   You should follow
 * the steps below and should save your session in a file called mysession.txt.
 * You should then upload your "mysession.txt" file to the
 * CS Portal: https://www.cs.uky.edu/csportal.
 *
 * YOU MUST PERFORM THIS EXERCISE ON YOUR VM.
 *
 * A. Record your session:
 *   1. Use the "script" command (script mysession.txt)
 *
 * B. Read through the test program to see what it is doing
 *   1. Use one of less, vim, emacs, gedit, or some other program
 *      to display the program.
 *  
 * C. Compile with varying levels of optimizations and time the runtime
 *   1. Compile with no optimizations using the -O0 option (gcc -Wall -O0 -o test test.c)
 *   2. Run and time the program (time ./test 1000)
 *   3. Compile with max optimizations using the -O3 option (gcc -Wall -O3 -o test test.c)
 *   4. Run and time the program (time ./test 1000)
 *   5. Say which is faster (echo "The FILL_IN_THE_BLANK was faster.  It took FILL_IN_THE_BLANK time.")[30;1H *
 * D. Profile both versions of the program using "gprof"
 *    (Do the following steps twice: first with a test program
 *     with no optimizations (-O0), and then with a test program
 *     with max optimizations (-O3).
 *   Steps to use gprof:
 *   1. compile with profiling and debugging options (-p and -g)
 *       and with the appropriate optimization.  For
 *       example, with no optimization it would be "gcc -Wall -p -g -O0 -o test test.c"
 *   2. run the program (./test 1000)
 *   3. print a "flat profile" (gprof -p ./test)
 *   4. print a "call stack profile" (gprof -q ./test)
 *
 * (Remember to repeat the above steps using max optimizations)
 *
 * E. Now profile both versions of the program using "valgrind"
 *    (Do the following steps twice: first with a test program
 *     with no optimizations (-O0), and then with a test program
 *     with max optimizations (-O3).
 *   Steps to use valgrind/kcachegrind:
 *   1. run valgrind to create a callgrind profile file[m[51;86H1,1[11CTop[1;1H[?12l[?25h[?25l[1;50r[1;1H[25M[1;51r[26;1H[34m *      (valgrind --tool=callgrind ./test 1000)
 *   2. run kcachegrind to view the profile (kcachegrind)
 *      Note this will not produce output in your mysession.txt file
 * 
 * F. Stop recording your session:
 *   1. type "exit"
 *
 * G. Now open a web browser on your VM and upload mysession.txt to https://www.cs.uky.edu/csportal
 */[m
[35m#include [m[31m<stdio.h>[m
[35m#include [m[31m<stdlib.h>[m

[32mint[m a([32mvoid[m) {
  [32mint[m i = [31m0[m, g = [31m0[m;
  [38;5;130mwhile[m(i++ < [31m100000[m) {[41;11Hg += i;
  }
  [38;5;130mreturn[m g;
} [34m// a()[m

[32mint[m c([32mvoid[m) {
  [32mint[m i = [31m0[m, g = [31m0[m;
  [38;5;130mwhile[m(i++ < [31m400000[m) {[49;10Hg += i;
  }[51;1H[K[51;86H26,2[10C46%[1;2H[?12l[?25h[?25l[1;50r[1;1H[25M[1;51r[26;3H[38;5;130mreturn[m g;
} [34m// c()[m

[32mint[m b([32mvoid[m) {
  [32mint[m i = [31m0[m, g = [31m0[m;
  [38;5;130mwhile[m(i++ < [31m400000[m) {[32;10Hg += i;
  }
  c();
  [38;5;130mreturn[m g;
} [34m// b()

/* ---- main() ---- */[m
[32mint[m main([32mint[m argc, [32mchar[m** argv)
{[41;9H[32mint[m iterations;[42;9H[38;5;130mif[m(argc != [31m2[m) {[43;17Hprintf([31m"Usage [m[35m%s[m[31m <Number of Iterations>[m[35m\n[m[31m"[m, argv[[31m0[m]);[44;17Hexit(-[31m1[m);[45;9H} [38;5;130melse[m {[46;17Hiterations = atoi(argv[[31m1[m]);[47;9H}[48;9Hprintf([31m"No of iterations = [m[35m%d\n[m[31m"[m, iterations);[49;9H[38;5;130mwhile[m(iterations--) {[50;17Ha();[51;86H[K[51;86H51,2[10C92%[1;2H[?12l[?25h[?25l[1;50r[1;1H[4M[1;51r[47;17Hb();[48;9H}[49;9H[38;5;130mreturn[m([31m0[m);
} [34m// main[m[51;86H[K[51;86H76,3[10CBot[22;3H[?12l[?25h[?25l[51;86H[K[51;1H:[?12l[?25hw[?25l[?12l[?25hq[?25l[?12l[?25h[?25l"test.c" 104L, 3529C written
[?1l>[?12l[?25h[?1049l]0;kmwe236@kmwe236: ~/CS485/lab1kmwe236@kmwe236:~/CS485/lab1$ ls
gmon.out  session_lab1.txt  [0m[01;32mtest[0m  test.c
]0;kmwe236@kmwe236: ~/CS485/lab1kmwe236@kmwe236:~/CS485/lab1$ rm test
]0;kmwe236@kmwe236: ~/CS485/lab1kmwe236@kmwe236:~/CS485/lab1$ gcc -Wall -p -g -O0 -o test test.c
]0;kmwe236@kmwe236: ~/CS485/lab1kmwe236@kmwe236:~/CS485/lab1$ ./test 1000
No of iterations = 1000
]0;kmwe236@kmwe236: ~/CS485/lab1kmwe236@kmwe236:~/CS485/lab1$ gprof -p ./test
Flat profile:

Each sample counts as 0.01 seconds.
  %   cumulative   self              self     total           
 time   seconds   seconds    calls  ms/call  ms/call  name    
 49.80      1.42     1.42     1000     1.42     2.62  b
 41.68      2.62     1.19     1000     1.19     1.19  c
  9.54      2.89     0.27     1000     0.27     0.27  a

 %         the percentage of the total running time of the
time       program used by this function.

cumulative a running sum of the number of seconds accounted
 seconds   for by this function and those listed above it.

 self      the number of seconds accounted for by this
seconds    function alone.  This is the major sort for this
           listing.

calls      the number of times this function was invoked, if
           this function is profiled, else blank.
 
 self      the average number of milliseconds spent in this
ms/call    function per call, if this function is profiled,
	   else blank.

 total     the average number of milliseconds spent in this
ms/call    function and its descendents per call, if this 
	   function is profiled, else blank.

name       the name of the function.  This is the minor sort
           for this listing. The index shows the location of
	   the function in the gprof listing. If the index is
	   in parenthesis it shows where it would appear in
	   the gprof listing if it were to be printed.

Copyright (C) 2012 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.
]0;kmwe236@kmwe236: ~/CS485/lab1kmwe236@kmwe236:~/CS485/lab1$ gprof -p ./test[Kecho "rong [K[K[K[K[Kwrong optimization level -- oops"
wrong optimization level -- oops
]0;kmwe236@kmwe236: ~/CS485/lab1kmwe236@kmwe236:~/CS485/lab1$ echo "wrong optimization level -- oops"[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[24Pgprof -p ./test[4P./test 1000gcc -Wall -p -g -O0 -o test test.c[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C./test 1000[Kgprof -p ./testecho "wrong optimization level -- oops"[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[Krm test
]0;kmwe236@kmwe236: ~/CS485/lab1kmwe236@kmwe236:~/CS485/lab1$ rm testecho "wrong optimization level -- oops"[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[24Pgprof -p ./test[4P./test 1000gcc -Wall -p -g -O0 -o test test.c[1P[1@3
]0;kmwe236@kmwe236: ~/CS485/lab1kmwe236@kmwe236:~/CS485/lab1$ gcc -Wall -p -g -O3 -o test test.c[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[Crm test[Kecho "wrong optimization level -- oops"[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[24Pgprof -p ./test[4P./test 1000
No of iterations = 1000
]0;kmwe236@kmwe236: ~/CS485/lab1kmwe236@kmwe236:~/CS485/lab1$ ./test 1000gcc -Wall -p -g -O3 -o test test.c[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[Crm test[Kecho "wrong optimization level -- oops"[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[24Pgprof -p ./test
Flat profile:

Each sample counts as 0.01 seconds.
 no time accumulated

  %   cumulative   self              self     total           
 time   seconds   seconds    calls  Ts/call  Ts/call  name    

 %         the percentage of the total running time of the
time       program used by this function.

cumulative a running sum of the number of seconds accounted
 seconds   for by this function and those listed above it.

 self      the number of seconds accounted for by this
seconds    function alone.  This is the major sort for this
           listing.

calls      the number of times this function was invoked, if
           this function is profiled, else blank.
 
 self      the average number of milliseconds spent in this
ms/call    function per call, if this function is profiled,
	   else blank.

 total     the average number of milliseconds spent in this
ms/call    function and its descendents per call, if this 
	   function is profiled, else blank.

name       the name of the function.  This is the minor sort
           for this listing. The index shows the location of
	   the function in the gprof listing. If the index is
	   in parenthesis it shows where it would appear in
	   the gprof listing if it were to be printed.

Copyright (C) 2012 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.
]0;kmwe236@kmwe236: ~/CS485/lab1kmwe236@kmwe236:~/CS485/lab1$ echo "no time accumua[Ka[Klated because it took less time than grpo[K[K[Kprof mesa[K[Kasured[Ks [K.. .?"
no time accumulated because it took less time than gprof measures...?
]0;kmwe236@kmwe236: ~/CS485/lab1kmwe236@kmwe236:~/CS485/lab1$ gprof -q ./test
gprof: gmon.out file is missing call-graph data
]0;kmwe236@kmwe236: ~/CS485/lab1kmwe236@kmwe236:~/CS485/lab1$ gprof -q ./test[1P ./testg ./test
gprof: invalid option -- 'g'
Usage: gprof [-[abcDhilLsTvwxyz]] [-[ACeEfFJnNOpPqSQZ][name]] [-I dirs]
	[-d[num]] [-k from/to] [-m min-count] [-t table-length]
	[--[no-]annotated-source[=name]] [--[no-]exec-counts[=name]]
	[--[no-]flat-profile[=name]] [--[no-]graph[=name]]
	[--[no-]time=name] [--all-lines] [--brief] [--debug[=level]]
	[--function-ordering] [--file-ordering]
	[--directory-path=dirs] [--display-unused-functions]
	[--file-format=name] [--file-info] [--help] [--line] [--min-count=n]
	[--no-static] [--print-path] [--separate-files]
	[--static-call-graph] [--sum] [--table-length=len] [--traditional]
	[--version] [--width=n] [--ignore-non-functions]
	[--demangle[=STYLE]] [--no-demangle] [--external-symbol-table=name] [@FILE]
	[image-file] [profile-file...]
]0;kmwe236@kmwe236: ~/CS485/lab1kmwe236@kmwe236:~/CS485/lab1$ gprof -g ./test[1P ./testq ./test[Krm test
]0;kmwe236@kmwe236: ~/CS485/lab1kmwe236@kmwe236:~/CS485/lab1$ ls
gmon.out  session_lab1.txt  test.c
]0;kmwe236@kmwe236: ~/CS485/lab1kmwe236@kmwe236:~/CS485/lab1$ lsrm testgprof -q ./testecho "no time accumulated because it took less time than gprof measures....?"[A]0;kmwe236@kmwe236: ~/CS485/lab1kmwe236@kmwe236:~/CS485/lab1$ gprof -p ./test[K
[K[A[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[4P./test 1000gcc -Wall -p -g -O3 -o test test.c[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[Crm test[Kecho "wrong optimization level -- oops"[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[24Pgprof -p ./test[4P./test 1000gcc -Wall -p -g -O0 -o test test.c[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[Crm test[Kgcc -Wall -p -g -O0 -o test test.c
]0;kmwe236@kmwe236: ~/CS485/lab1kmwe236@kmwe236:~/CS485/lab1$ valgrind --tool=callgrind ./test 1000
==4775== Callgrind, a call-graph generating cache profiler
==4775== Copyright (C) 2002-2013, and GNU GPL'd, by Josef Weidendorfer et al.
==4775== Using Valgrind-3.10.1 and LibVEX; rerun with -h for copyright info
==4775== Command: ./test 1000
==4775== 
==4775== For interactive control, run 'callgrind_control -h'.
No of iterations = 1000
==4775== 
==4775== Events    : Ir
==4775== Collected : 6300465261
==4775== 
==4775== I   refs:      6,300,465,261
]0;kmwe236@kmwe236: ~/CS485/lab1kmwe236@kmwe236:~/CS485/lab1$ ls
callgrind.out.4775  gmon.out  session_lab1.txt  [0m[01;32mtest[0m  test.c
]0;kmwe236@kmwe236: ~/CS485/lab1kmwe236@kmwe236:~/CS485/lab1$ kcachegrind callgrind.out.4775 
kcachegrind: cannot connect to X server 
]0;kmwe236@kmwe236: ~/CS485/lab1kmwe236@kmwe236:~/CS485/lab1$ kcachegrind
kcachegrind: cannot connect to X server 
]0;kmwe236@kmwe236: ~/CS485/lab1kmwe236@kmwe236:~/CS485/lab1$ sudo kcachegrind
sudo: unable to resolve host kmwe236
kcachegrind: cannot connect to X server 
]0;kmwe236@kmwe236: ~/CS485/lab1kmwe236@kmwe236:~/CS485/lab1$ echo "Dr. Finkel says I should report user-time, so it a[K[K[Kt actually took 0.00  seconds"
Dr. Finkel says I should report user-time, so it actually took 0.00 seconds
]0;kmwe236@kmwe236: ~/CS485/lab1kmwe236@kmwe236:~/CS485/lab1$ xhost local:root
xhost:  unable to open display ""
]0;kmwe236@kmwe236: ~/CS485/lab1kmwe236@kmwe236:~/CS485/lab1$ xhost local:rootecho "Dr. Finkel says I should report user-time, so it actually took 0.00  seconds"[A]0;kmwe236@kmwe236: ~/CS485/lab1kmwe236@kmwe236:~/CS485/lab1$ sudo kcachegrind[K
[K[A[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[5Pkcachegrind
kcachegrind: cannot connect to X server 
]0;kmwe236@kmwe236: ~/CS485/lab1kmwe236@kmwe236:~/CS485/lab1$ ls
callgrind.out.4775  gmon.out  session_lab1.txt  [0m[01;32mtest[0m  test.c
]0;kmwe236@kmwe236: ~/CS485/lab1kmwe236@kmwe236:~/CS485/lab1$ vi callgrind.out.4775 
[?1049h[?1h=[2;1Hâ–½[6n[1;1H  [1;1H[1;51r[?12;25h[?12l[?25h[27m[m[H[2J[?25l[51;1H"callgrind.out.4775" 6688L, 51328C[>c[1;1Hversion: 1
creator: callgrind-3.10.1
pid: 4775
cmd:  ./test 1000
part: 1


desc: I1 cache:
desc: D1 cache:
desc: LL cache:

desc: Timerange: Basic block 0 - 900099853
desc: Trigger: Program termination

positions: line
events: Ir
summary: 6300400796


ob=(2) ???
fl=(14) ???
fn=(468) 0x00000000004008ac
0 3

fn=(264) 0x00000000004004f0
0 5
cob=(5) /home/kmwe236/CS485/lab1/test
cfi=(59) ???
cfn=(268) __gmon_start__
calls=1 0
0 61699
0 2

fn=(206) 0x0000000004a25560
0 6

fn=(494) 0x0000000004a257e8
0 3

ob=(1) /lib/x86_64-linux-gnu/ld-2.19.so
fl=(12) /build/eglibc-oGUzwX/eglibc-2.19/string/../string/memcmp.c
fn=(26) bcmp
315 12
+3 12
-3 60
+4 12
-4 12
+7 24
+4 12
+16 4[51;86H1,1[11CTop[1;1H[?12l[?25h[?25l[51;1H[K[51;1H:[?12l[?25hw[?25l[?12l[?25hq[?25l[?12l[?25h[?25l"callgrind.out.4775" 6688L, 51328C written
[?1l>[?12l[?25h[?1049l]0;kmwe236@kmwe236: ~/CS485/lab1kmwe236@kmwe236:~/CS485/lab1$ k[Kkcachegrind[K[K[K[K[K[K[K[K[K[K[Kls
callgrind.out.4775  gmon.out  session_lab1.txt  [0m[01;32mtest[0m  test.c
]0;kmwe236@kmwe236: ~/CS485/lab1kmwe236@kmwe236:~/CS485/lab1$ exit
exit

Script done on Fri 26 Aug 2016 01:28:39 PM EDT
